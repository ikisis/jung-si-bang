val oneTwoThree = List(1, 2, 3)

for(i <- 0 to 2)
  println(oneTwoThree(i))

val oneTwo = List(1, 2)
val threeFour = List(3, 4)
val oneTwoThreeFour = oneTwo ::: threeFour
println(oneTwo +" and "+ threeFour +" were not mutated.")
println("Thus, "+ oneTwoThreeFour +" is a new list.")

val twoThree = List(2, 3)
val oneTwoThree1 = 1 :: twoThree
println(oneTwoThree1)

val oneTwoThree2 = 1::2::3::Nil
println(oneTwoThree2)

val thrill = "Will"::"fill"::"until"::Nil

println(thrill(2))

println(thrill.count(s => s.length == 4))
println(thrill.count(_.length == 4))
println(thrill.drop(2))
println(thrill.dropRight(2))
println(thrill.exists(s => s == "until"))
println(thrill.exists(_ == "until"))
println(thrill.filter(s => s.length == 4))
println(thrill.filter(_.length == 4))
println(thrill.forall(s => s.endsWith("l")))
println(thrill.forall(_.endsWith("l")))
thrill.foreach(s => print(s))
thrill.foreach(print(_))
thrill.foreach(print)
println()
println(thrill.head)
println(thrill.init)
println(thrill.isEmpty)
println(thrill.map(s => s + "y"))
println(thrill.map(_ + "y"))
println(thrill.mkString)
println(thrill.sortWith((s,t) => s.charAt(0).toLower < t.charAt(0).toLower))
